---
import BaseLayout from "../../layouts/BaseLayout.astro";
import Card from "../../components/series/Card.astro";
import { getCollection, getEntry } from "astro:content";

interface Crossword_ {
    slug: string,
    collection: "crossword"
}

export async function getStaticPaths() {
    const entries = await getCollection('series');

    return entries.map(entry => ({
        params: {slug: entry.slug},
        props: { entry }
    }))
}


const { entry } = Astro.props;
const author = await getEntry("author", entry.data.author.id)!
const category = await getEntry("category", entry.data.category.id)!
const crosswords = await Promise.all(
    entry.data.crosswords.map((crossword: Crossword_) => {
        return getEntry('crossword', crossword.slug)
    })
)

---


<BaseLayout title={entry.data.title}>

<section class="grid-setup">
    <ul class="categories">
        <li class="category">{category.data.name}</li>
    </ul>

    <h1 id="series-title"> {entry.data.title} </h1>

    <p class="count">A {entry.data.crosswords.length}-crossword series</p>

    <article class="author">
        <figure class="author-image">
            <img src={author.data.image} alt={author.data.name} loading="lazy">    
        </figure>
        <p>By <strong>{author.data.name}</strong></p>
    </article>

    <p class="description">{entry.data.description}</p>


    <ol class="crosswords-list">

        {crosswords.map((crossword) => {
            return (<li> <Card slug={crossword.slug} title={crossword.data.title} /> </li>)
        })} 
    
    </ul>



</section>


</BaseLayout>




<style lang="scss">
section {
    --_spacer: 0.75rem;
    grid-column: full;
    gap: 0.75rem 0;
    position: relative;
    padding-bottom: 2rem;

    h1 {
        margin-top: -0.25rem;
    }

    ol.crosswords-list {
        display: grid;
        gap: 1.25rem 1rem;
        list-style: none;
        counter-reset: series-crossword-item;
    }



    p.count {
        font-size: var(--step-0);
        font-weight: 700;
        margin-top: -0.5rem;

    }

    figure.image {
        grid-row: 1 / 2; // Has the same grid-row value as the progress bar to stack them
        grid-column: content;
        background: var(--clr-white);
        height: min(300px, 45vh);
        overflow: hidden;
        border-radius: 0;
        box-shadow: var(--shadow-elevation-medium);
        
        @media (min-width: 768px) {
            border-radius: var(--radius);
        }
    }

    figure.image > img {
        object-fit: cover;
        object-position: top center;
        width: 100%;
        height: 100%;
    }


    ul.categories {
        display: flex;
        flex-wrap: wrap;
        gap: 0.25rem 0.5rem;

        list-style: none;
        font-size: var(--step-0);


        li {
            background: var(--clr-white);
            cursor: pointer;
            border-radius: var(--radius);
            padding: 0.2rem 0.25rem;
            box-shadow: var(--shadow-elevation-low);
        }
    }


    article.author {
        --image-size: 40px;
        display: flex;
        flex-direction: row;
        align-items: center;
        gap: 0.5rem;
        
        strong {
            // font-size: var(--step-2);
            font-weight: bold;
            text-decoration: underline;
        }
    }


    figure.author-image {
        --radius: 50%;
        --border: 1px solid var(--clr-white);
        background: var(--clr-white);
        position: relative;
        width: var(--image-size, 50px);
        border-radius: var(--radius);
        outline: 1px solid var(--clr-grey-700);
        border: var(--border);
        outline-offset: -5px;
        aspect-ratio: 1;
        overflow: hidden;
        isolation: isolate;
        transition: transform 200ms ease-in-out;


        &:hover, &:focus {
            transform: scale(2);
        }


        img {
            object-fit: cover;
            width: 100%;
            height: 100%;
            
        }
    }


    time {
        font-style: italic;
    }


    // Spacing
    & > figure.image, & > p.description   {
        margin-bottom: var(--_spacer);
    }

    & > p.description {
        margin-bottom: calc(var(--_spacer) * 2);
    }
    

}

</style>





