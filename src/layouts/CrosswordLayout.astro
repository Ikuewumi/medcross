---
import BaseLayout from "./BaseLayout.astro";
import CrosswordPage from "../components/CrosswordPage.svelte";
import MetaInformation from "../components/layout/MetaInformation.astro";
import type { CrossFull } from "../composables/engine";
import { encodeString } from "../composables/text";
import "../styles/filters.scss";

interface Prop extends CrossFull {
    authorImage: string
    categoryLink: string
}

export interface Props extends Prop {
    frontmatter?: Prop
}

const { title, description, image, category, author, size, words, authorImage, categoryLink } = Astro.props?.frontmatter || Astro.props



---

<BaseLayout title={title}>
    <Fragment slot="meta">
        <MetaInformation
            title={title}
            description={description}
            image={image}
            content="website"
        />
    </Fragment>

    <section class="grid-setup" id="crossword-page">
        <figure class="image valencia">
            <img src={image} alt={title}  />
        </figure>
        
        <ul class="categories">
            
            <li><a href={categoryLink}>#{category}</a></li>
            
        </ul>
        
        <h1 id="crossword-title">{title}</h1>

        <article class="author">
            <figure class="author-image">
                <img src={authorImage} alt={author} loading="lazy">
            </figure>

            <p>By <strong>{author}</p>
        </article>

        <p>{description}</p>



        <CrosswordPage enc={
            encodeString(JSON.stringify( { size, words }))
        } client:only  />


        <slot></slot>
    </section>


</BaseLayout>

<style lang="scss">
section {
    --_spacer: 0.75rem;
    grid-column: full;
    gap: 0.75rem 0;
    position: relative;
    padding-bottom: 0rem;





    figure.image {
        grid-row: 1 / 2; // Has the same grid-row value as the progress bar to stack them
        grid-column: content;
        background: var(--clr-white);
        height: min(300px, 45vh);
        overflow: hidden;
        border-radius: 0;
        box-shadow: var(--shadow-elevation-medium);
        
        @media (min-width: 768px) {
            border-radius: var(--radius);
        }
    }

    figure.image > img {
        object-fit: cover;
        object-position: top center;
        width: 100%;
        height: 100%;
    }


    ul.categories {
        display: flex;
        flex-wrap: wrap;
        gap: 0.25rem 0.5rem;

        list-style: none;
        font-size: var(--step-0);


        a{
            color: var(--clr-grey-400);
            text-decoration: none;
        }


        li {
            background: var(--clr-white);
            cursor: pointer;
            border-radius: var(--radius);
            padding: 0.2rem 0.25rem;
            box-shadow: var(--shadow-elevation-low);
        }
    }


    article.author {
        --image-size: 40px;
        display: flex;
        flex-direction: row;
        align-items: center;
        gap: 0.5rem;
        
        strong {
            // font-size: var(--step-2);
            font-weight: bold;
            text-decoration: underline;
        }
    }


    figure.author-image {
        --radius: 50%;
        --border: 1px solid var(--clr-white);
        background: var(--clr-white);
        position: relative;
        width: var(--image-size, 50px);
        border-radius: var(--radius);
        outline: 1px solid var(--clr-grey-700);
        border: var(--border);
        outline-offset: -5px;
        aspect-ratio: 1;
        overflow: hidden;
        isolation: isolate;
        transition: transform 200ms ease-in-out;


        &:hover, &:focus {
            transform: scale(2);
        }


        img {
            object-fit: cover;
            width: 100%;
            height: 100%;
            
        }
    }


    time {
        font-style: italic;
    }


    // Spacing
    & > figure.image, & > p   {
        margin-bottom: var(--_spacer);
    }

    & > p {
        margin-bottom: calc(var(--_spacer) * 2);
    }
    

}
</style>
